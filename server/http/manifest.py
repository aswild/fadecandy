# Manifest of files to include in the simple HTTP server.
# Run this script to generate the httpdocs.cpp source file.

manifest = [
    ('/', 'index.html', 'text/html'),

    # Images
    ('/media/favicon.png', None, 'image/png'),
    ('/favicon.ico', 'media/favicon.ico', 'image/x-icon'),

    # Javascript and CSS
    ('/js/home.js', None, 'application/javascript'),
    ('/css/narrow.css', None, 'text/css'),

    # Redistributed libraries
    ('/dist/css/bootstrap.min.css', None, 'text/css'),
    ('/dist/js/bootstrap.min.js', None, 'application/javascript'),
    ('/dist/js/jquery-1.10.2.min.js', None, 'application/javascript'),

    # 404 error document must be last.
    (None, '404.html', 'text/html'),
]

import argparse, json, sys, os, zlib

parser = argparse.ArgumentParser()
parser.add_argument('--output', '-o', help='File to write to, or stdout if not given')
args = parser.parse_args()

if args.output:
    outfile = open(args.output, 'w')
else:
    outfile = sys.stdout

thisdir = os.path.dirname(sys.argv[0])
if thisdir:
    os.chdir(thisdir)

outfile.write("""/*
 * HTTP Document data.
 * Automatically generated by manifest.py
 */

#include "tcpnetserver.h"

TcpNetServer::HTTPDocument TcpNetServer::httpDocumentList[] = {
""")

def quote(buf):
    # Encode a byte buffer as a C++ string, and octal-escape any funny characters

    if buf is None:
        return 'NULL'
    output = ['"']

    allowedBytes = [c for c in range(ord(' '), ord('~') + 1) if chr(c) not in '"\\?']
    for c in buf:
        byte = c
        if isinstance(c, str):
          byte = ord(c)
        if byte in allowedBytes:
            output.append(chr(byte))
        else:
            output.append('\\%03o'%byte)

    output.append('"')
    return ''.join(output)

for path, filename, contentType in manifest:
    if filename is None:
        filename = '.' + path

    if contentType.startswith('text/'):
        raw = open(filename, 'r').read().encode('UTF-8')
    else:
        raw = open(filename, 'rb').read()
    data = zlib.compress(raw)
    outfile.write("{ %s, %s, %s, %d },\n" %
        (quote(path), quote(data), quote(contentType), len(data)))

outfile.write("};\n")
outfile.close()
